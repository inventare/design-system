@use "../../breakpoints";
@use "../../prefix";

$container-padding-x: 0;
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px,
);

@mixin make-container($gutter: $container-padding-x) {
  --#{prefix.$variable-prefix}gutter-x: #{$gutter};
  --#{prefix.$variable-prefix}gutter-y: 0;
  width: 100%;
  padding-right: var(--#{prefix.$variable-prefix}gutter-x, #{$gutter});
  padding-left: var(--#{prefix.$variable-prefix}gutter-x, #{$gutter});
  margin-right: auto;
  margin-left: auto;
}

.container,
.container-fluid {
  @include make-container();
}

@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }

  @include breakpoints.media-breakpoint-up($breakpoint, breakpoints.$grid-breakpoints) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in breakpoints.$grid-breakpoints {
      @if ($extend-breakpoint) {
        .container#{breakpoints.breakpoint-infix($name, breakpoints.$grid-breakpoints)} {
          @extend %responsive-container-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint ==$name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}
